# frozen_string_literal: true

class Object
  # Initilaze a new color object for a role.
  # @param [String] The hex color to resolve.
  # @return [ColourRGB] A colourRGB object.
  def resolve_color: (untyped color) -> (nil | untyped)

  # Converts a unix timestap into a readable timestamp.
  # @param timestamp [Integer] The unix timestamp to covert.
  # @return [String] Time data serialized as a string.
  def resolve_time: (untyped timestamp) -> untyped

  # Returns true if a string doesn't contain any bad words.
  # @param [String] The string to check.
  # @return [Boolean] If the name contains any bad words.
  def safe_name?: (untyped name) -> (true | untyped)

  # Checks if a guild member is still boosting a guild.
  # @param server [Integer, String] An ID that uniquely identifies a guild.
  # @param user [Integer, String] An ID that uniquely identifies a user.
  # @return [Boolean] Returns true if the user is boosting the server; false otherwise.
  def get_booster_status: (untyped server, untyped user) -> untyped

  # Deletes a role in a guild.
  # @param server [Integer, String] An ID that uniquely identifies a guild.
  # @param role [Integer, String] An ID that uniquely identifies a role.
  def delete_guild_role: (untyped server, untyped role) -> untyped

  # Similar to Python imports. Requires a file.
  # @param file [String] Name of the file to import.
  def import: (untyped file) -> untyped

  # Returns a random GIF link for use by the affection and snowball commands.
  # @param [Integer] An integer from 1-7 representing the type of action.
  # @return [String] The appropriate GIF for the action.
  def gif: (untyped type) -> untyped
end
